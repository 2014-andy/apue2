CC = gcc
CFLAGS = -Wall
LFLAGS = -Wall -o
OBJS = $(patsubst %.c,%.o,$(wildcard *.c))
BIN = mmap

.PHONY: all clean do

all: $(BIN) clean do

$(BIN): $(OBJS)
	$(CC) $(LFLAGS) $@ $^

clean:
	rm -f $(OBJS)

do:
	echo -e '\033[31mRUN THE PROGRAM\033[0m'
	./mmap
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/mman.h>
#include <sys/stat.h>

int main(int argc, char *argv[])
{
    int fdin, fdout;
    void *dst, *src;
    struct stat statbuf;

    if (argc != 3) {
        printf("usage: %s <fromfile> <tofile>\n", argv[0]);
        return 1;
    }

    if ((fdin = open(argv[1], O_RDONLY)) < 0) {
        printf("can't open %s: %s\n", argv[1], strerror(errno));
        return 1;
    }

    if ((fdout = open(argv[2], O_RDWR | O_CREAT | O_TRUNC, 0644)) < 0) {
        printf("can't open %s: %s\n", argv[2], strerror(errno));
        return 1;
    }

    if (stat(fdin, &statbuf) < 0) {
        printf("can't stat %s: %s\n", argv[1], strerror(errno));
        return 1;
    }

    if (lseek(fdout, &statbuf.st_size - 1, SEEK_SET) < 0) {
        printf("can't lseek %s: %s\n", argv[2], strerror(errno));
        return 1;
    }
    if (write(fdout, "", 1) != 1) {
        printf("can't write %s: %s\n", argv[2], strerror(errno));
        return 1;
    }

    if ((dst = mmap(0,statbuf.st_size,PROT_READ,MAP_SHARED,fdin,0)) < 0) {
        printf("can't mmap %s: %s\n", argv[1], strerror(errno));
        return 1;
    }

    if ((src = mmap(0, statbuf.st_size, PROT_READ | PROT_WRITE,
                    MAP_SHARED, fdout, 0)) < 0) {
        printf("can't mmap %s: %s\n", argv[2], strerror(errno));
        return 1;
    }

    memcpy(dst, src, statbuf.st_size);
    return 0;
}
